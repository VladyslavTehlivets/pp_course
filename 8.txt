Preprocesor
======================

Kod źródłowy tuż przed właściwą kompilacją,
jest przetwarzany przez preprocesor.

Do tej pory wykorzystywaliśmy preproceror pisząc
dyrektywę np. `#include <stdio.h>`.
Jej działanie polega na dołączeniu zawartości pliku
`stdio.h` do aktualnie kompilowanego pliku.

Aby zobaczyć wynik działania preprocera,
użyj opcji `-E`:

    gcc program.c -E -o plik_posredni.c
    # lub:
    gcc program.c -E -o - | less

Makrodefinicje
----------------------
Dyrektywa `#define` służy do definiowania makrodefinicji.
Przykład:

    #define PI 3.141592653589
    #define KWADRAT(x) x*x

Definicja `KWADRAT` jest wadliwa --- dlaczego?
Rozważ, jak preprocer rozwinie użycie makrodefinicji
w następujący sposób: `KWADRAT(x+1)`.

Rozwiązaniem jest użycie nawiasów, którymi powinny być
otoczone argumenty oraz całe wyrażenie.

Przykład:

    #define MAX(a,b) a>b?a:b
    MAX(x?1:0, y?0:1) // wynik: x?1:0>y?0:1?x?1:0:y?0:1
    // druga próba:
    #define MAX(a,b) (a)>(b)?(a):(b)
    // trzecia próba:
    #define MAX(a,b) ((a)>(b)?(a):(b))

Wniosek: w makrodefinicjach zawsze warto otoczyć każdy parametr
oraz całe wyrażenie nawiasami.

Makrodefinicje instrukcji
----------------------
Jeśli makrodefinicja definiuje instrukcję,
możemy napotkać kłopoty jak w przykładzie poniżej:

    #define PRINT_INT_IF_EVEN(n) if(n%2==0) printf("%d", n)
    int number = 1;
    // pierwsze użycie --- w porządku:
    PRINT_INT_IF_EVEN(number);
    // inny przykład użycia:
    if(n>10)
        PRINT_INT_IF_EVEN(n);
    else
        printf("Liczba nie jest większa od 10.\n");

Co w powyższym przykładzie powoduje błąd?

Rozwiązaniem, które eliminuje tego typu błędy
--- które powinniśmy stosować zawsze przy definiowaniu makr rozwijanych do instrukcji
jest "sztuczne" użycie pętli `do-while`:

    #define PRINT_INT_IF_EVEN(n) do{ if(n%2==0) printf("%d", n); }while(0)

